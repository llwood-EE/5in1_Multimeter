//Electrical Hub App ENEL 400 group 25
//portions of the code were generated by ChatGPT, specifically BLE connection and share function.


import 'package:flutter/material.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'dart:convert'; // Needed for converting BLE byte array to String
import 'package:path_provider/path_provider.dart';
import 'package:open_file_plus/open_file_plus.dart';
import 'dart:io';

// each component is a list of a list of strings... [values, times, user input notes]
List<List<String>> amps = [];
List<List<String>> volts = []; 
List<List<String>> resistance = [];
List<List<String>> capacitance = [];
List<List<String>> inductance = [];
List<List<String>> garbage = [];
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: StartupScreen()
    );
  }
}

// startup screen
class StartupScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0c7489),
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min, mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Electrical Hub',
              style: TextStyle(fontSize: 60, fontWeight: FontWeight.bold, color: const Color(0xFF8ee3f5),),
            ),
            SizedBox(height: 200),
            ElevatedButton(
              onPressed: () {
                // Go to home screen
                Navigator.push(context, MaterialPageRoute(builder: (context) => HomeScreen()));
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xff8ee3f5), foregroundColor: const Color(0xFF0c7489),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                minimumSize: Size(300, 60), elevation: 10
              ),
              child: Text('Get Started', style: TextStyle(fontSize: 20, ))
            )
          ]
        )
      )
    );
  }
}

// homescreen
class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  
  //BLE connection functions generated by ChatGPT
  BluetoothDevice? connectedDevice;
  BluetoothCharacteristic? targetCharacteristic;
  String receivedValue = "waiting...";

  @override
  void initState() {
    super.initState();
    scanForDevices(); // Start scanning for BLE devices
  }

  //  scan for ble
  void scanForDevices() async {
    FlutterBluePlus.startScan();

    FlutterBluePlus.scanResults.listen((List<ScanResult> results) {
      for (ScanResult result in results) {
        if (result.device.platformName == "EHub") { // Match ESP32 BLE name
          connectToDevice(result.device);
          FlutterBluePlus.stopScan(); // Stop scanning
          break;
        }
      }
    });
  }

  // Connect to ESP32 and Notifs
  void connectToDevice(BluetoothDevice device) async {
    await device.connect();
    setState(() {
      connectedDevice = device;
    });
    //if it disconnects
    device.connectionState.listen((state) {
    if (state == BluetoothConnectionState.disconnected) {
      setState(() {
        connectedDevice = null;
        targetCharacteristic = null;
        receivedValue = "Waiting...";
      });
      scanForDevices(); //restart scan
    }
    });

    List<BluetoothService> services = await device.discoverServices();
    for (BluetoothService service in services) {
      for (BluetoothCharacteristic c in service.characteristics) {
        if (c.properties.notify) { // Find the right characteristic
          targetCharacteristic = c;
          await c.setNotifyValue(true); // Enable BLE notifications
          c.lastValueStream.listen((value) {
            setState(() {
              receivedValue = utf8.decode(value); // Convert BLE byte to string
            });
          });
          return;
        }
      }
    }
  }
  

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Multimeter', style: TextStyle(color:const Color(0xFF0c7489))),
                      backgroundColor: const Color(0xff8ee3f5)),
      backgroundColor: const Color(0xff8ee3f5),
      body: Stack(
        children: [
          // Big data display
          Align(
            alignment: Alignment(0.0, -0.7), 
            child: Text(receivedValue, style: TextStyle(fontSize: 80, fontWeight: FontWeight.bold, color:Colors.black))
          ),

          // White Rectangle at the Bottom
          Align(
            alignment: Alignment.bottomCenter,
            child: Container(
              height: MediaQuery.of(context).size.height * 0.5, // Half of the screen
              width: double.infinity,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(topLeft: Radius.circular(55), topRight: Radius.circular(55))
              ),
              child: Padding(
                padding: EdgeInsets.only(top: 50, left: 40, right:40), // Padding inside the rectangle
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start, // Align text to the left
                  children: [
                    
                    Text(
                      "Bluetooth Status", 
                      style: TextStyle(fontSize: 35, fontWeight: FontWeight.bold, color: const Color(0xFF0c7489)),
                    ),
                    SizedBox(height: 20), //space between text
                    Text(
                      connectedDevice != null
                          ? "Connected to: ${connectedDevice!.platformName}!\n Pressing the back button will disconnect the Bluetooth device." 
                          : "Searching for ESP32 BLE...\n\nPlease ensure the Electrical Hub is turned on.\nIf there is still no connection, restart the app and reset the Electrical Hub.",
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.normal, color: const Color(0xFF0c7489)),
                      textAlign: TextAlign.left,
                    ),
                    SizedBox(height: 90), 

                  ]
                )
              )
            )
          ),

         Align( //SAVED DATA BUTTON
            alignment: Alignment.bottomCenter,
            child: Padding(
            padding: EdgeInsets.only(bottom: 90), // space above bottom
              child: ElevatedButton(
                onPressed: () { Navigator.push(context, MaterialPageRoute(builder: (context) => SaveScreen()));
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF0c7489), foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                  minimumSize: Size(300, 60), elevation: 5
                ),
                child: Text('Saved Data', style: TextStyle(fontSize: 20))
              )
            )
          ),
        
          Align(
            alignment: Alignment.topRight,
            child: Padding(
            padding: EdgeInsets.only(right: 60, top: MediaQuery.of(context).size.height * 0.5 - 110), // space below top
              child: ElevatedButton( //SAVE THE DATA BUTTON
                onPressed: () {

                   Map<String, double> unitMap = {
                    "n": 1E-9, "u": 1E-6, "m": 1E-3, "k": 1E3, "M": 1E6
                  };

                  // remove unit and get proper multiplier
                  double multiplier = 1.0; //regular multiplier
                  String receivedValue1 = receivedValue.trim(); 

                  //? makes numValue become null if double.tryparse is null
                  //RegExpr identifies all letters and splits the string into two parts
                  //[0] takes the first part and .trim removes any spaces
                  double? splitValue = double.tryParse(receivedValue1.split(RegExp(r"[A-Za-z]"))[0].trim());
                  String splitUnit = receivedValue1.replaceFirst(splitValue.toString(), "").trim(); // Extract unit 

                  for (String prefix in unitMap.keys) {
                    if (receivedValue.contains(prefix)) {
                      receivedValue1 = receivedValue.replaceFirst(prefix, "").trim(); // Remove unit
                      multiplier = unitMap[prefix]!; // Get multiplier from map
                      break;
                    }
                  }

                  String finalSavedValue = receivedValue1;

                  if (splitValue!= null){
                    splitValue *= multiplier;
                    finalSavedValue = splitValue.toStringAsExponential(3); //back to string 
                  }

                  splitUnit = splitUnit.trim(); //make sure not spaces

                  //CATEGORIZE MEASUREMENT TYPE! dont fix what isnt broken type beat
                  if (splitUnit.endsWith("A")) {
                    //DateTime normally gives a massive string, but the split and [1] makes sure it only give the time and not the date
                    amps.add([finalSavedValue, DateTime.now().toLocal().toString().split(' ')[1], ""]); // note empty
                  } else if (splitUnit.endsWith("V")) {
                    volts.add([finalSavedValue, DateTime.now().toLocal().toString().split(' ')[1], ""]);
                  } else if (splitUnit.endsWith("Î©")) {
                    resistance.add([finalSavedValue, DateTime.now().toLocal().toString().split(' ')[1], ""]);
                  } else if (splitUnit.endsWith("F")) {
                    capacitance.add([finalSavedValue, DateTime.now().toLocal().toString().split(' ')[1], ""]);
                  } else if (splitUnit.endsWith("H")) {
                    inductance.add([finalSavedValue, DateTime.now().toLocal().toString().split(' ')[1], ""]);
                  } else {
                    garbage.add([finalSavedValue, DateTime.now().toLocal().toString().split(' ')[1], ""]);
                  }// Save current value
                  ScaffoldMessenger.of(context).hideCurrentSnackBar(); //hide current snackbars
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text("Value saved!"), duration: Duration(seconds: 1), backgroundColor: const Color(0xFF493548))
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF0c7489), foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                  minimumSize: Size(130, 60), elevation: 5
                ),
                child: Text('Save', style: TextStyle(fontSize: 20))
              )
            )
          )
        ]
      )
    );
  }
}


class SaveScreen extends StatefulWidget {
  @override
  _SaveScreenState createState() => _SaveScreenState();
}

class _SaveScreenState extends State<SaveScreen> {
  List<List<String>> currentList = volts; //initial savescreen
  String currentTitle = "Volts";

  @override
  
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(currentTitle, style: TextStyle(color: const Color(0xFF0c7489))), backgroundColor: const Color(0xff8ee3f5)
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader( //hamburger menu
              decoration: BoxDecoration(color: const Color(0xFF493548)),
              child: Text("Measurement Type", style: TextStyle(color: Colors.white, fontSize: 24))
            ),
            ListTile(
              title: Text("Amps"),
              onTap: () {
                setState(() {
                  currentList = amps;
                  currentTitle = "Amps";
                });
                Navigator.pop(context); //go back a screen
              }
            ),
            ListTile(
              title: Text("Volts"),
              onTap: () {
                setState(() {
                  currentList = volts;
                  currentTitle = "Volts";
                });
                Navigator.pop(context);
              }
            ),
            ListTile(
              title: Text("Resistance"),
              onTap: () {
                setState(() {
                  currentList = resistance;
                  currentTitle = "Resistance";
                });
                Navigator.pop(context);
              }
            ),
            ListTile(
              title: Text("Capacitance"),
              onTap: () {
                setState(() {
                  currentList = capacitance;
                  currentTitle = "Capacitance";
                });
                Navigator.pop(context);
              }
            ),
            ListTile(
              title: Text("Inductance"),
              onTap: () {
                setState(() {
                  currentList = inductance;
                  currentTitle = "Inductance";
                });
                Navigator.pop(context);
              }
            ),
            ListTile(
              title: Text("Garbage"),
              onTap: () {
                setState(() {
                  currentList = garbage;
                  currentTitle = "Garbage";
                });
                Navigator.pop(context);
              }
            )
          ]
        )
      ),
      backgroundColor: Colors.white,
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: currentList.isEmpty? Center(child: Text("Nothing to see here!")) 
            : SingleChildScrollView(
              scrollDirection: Axis.vertical,
              child: DataTable(
                columns: [
                  DataColumn(label: Text('Value', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold))),
                  DataColumn(label: Text('Time', style: TextStyle(fontSize: 20))),
                  DataColumn(label: Text('Note', style: TextStyle(fontSize: 20))),
                ],
                rows: currentList.map((row) {
                  return DataRow(
                    cells: [
                      DataCell(Text(row[0])), // value
                      DataCell(Text(row[1])), // time
                      DataCell(
                        //TextFormField creates editable textbox
                        TextFormField(initialValue: row[2], 
                                      //onChanged: saves the value (val) back into the list once its been changed
                                      onChanged: (val) {setState(() { row[2] = val;});}
                        )
                      )
                    ]
                  );
                }).toList()
              )
            )

        
      ),

      //Buttons
      floatingActionButton: Row(
        mainAxisSize: MainAxisSize.min, // Keeps buttons at the bottom
        children: [
          FloatingActionButton(
            backgroundColor: const Color(0xFF0c7489),
            child: Icon(Icons.download, color: Colors.white),
            onPressed: _shareData // Save Excel function
          ),
          SizedBox(width: 10), // Space between buttons
          FloatingActionButton(
            backgroundColor: const Color(0xFF0c7489),
            child: Icon(Icons.delete, color: Colors.white),
            onPressed: () {
              setState(() {
                currentList.clear();
              });
            }
          )
        ]
      )
      
    );
  }

  //******Share function generated by ChatGPT**********
  Future<void> _shareData() async {
    // Format data into a readable text
    String dataText = "$currentTitle Data**\n";
    dataText += "$currentTitle, Time, Note\n";
    for (var row in currentList) {
      dataText += "${row[0]}, ${row[1]}, ${row[2]}\n";
    }

    // Use share_plus to send the text
    // Get temp directory and create file
  final directory = await getTemporaryDirectory();
  final filePath = '${directory.path}/$currentTitle.csv';
  final file = File(filePath);
  await file.writeAsString(dataText);

  // Share the file
  await OpenFile.open(filePath);
  }


}